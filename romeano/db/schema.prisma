// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

// --------------------------------------

model User {
  id               Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String            @unique
  photoUrl         String?
  accountExecutive AccountExecutive?
  stakeholder      Stakeholder?
  documents        Document[]
  userPortals      UserPortal[]
  messagesSent     InternalNotes[]
  tokens           Token[]
  sessions         Session[]
  magicLink        MagicLink[]
  hashedPassword   String?
  role             String            @default("USER")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Event            Event[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Vendor {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  logoUrl     String
  vendorTeams VendorTeam[]
  portals     Portal[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model VendorTeam {
  id                Int                @id @default(autoincrement())
  vendor            Vendor             @relation(fields: [vendorId], references: [id])
  vendorId          Int
  accountExecutives AccountExecutive[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum Role {
  AccountExecutive
  Stakeholder
}

model UserPortal {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  portal    Portal   @relation(fields: [portalId], references: [id])
  portalId  Int
  role      Role
  createdAt DateTime @default(now())

  @@id([userId, portalId])
}

model Stakeholder {
  jobTitle     String
  isApprovedBy Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       Int     @unique
}

model AccountExecutive {
  id           Int        @id @default(autoincrement())
  jobTitle     String
  vendorTeam   VendorTeam @relation(fields: [vendorTeamId], references: [id])
  vendorTeamId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Portal {
  id                  Int                  @id @default(autoincrement())
  customerName        String
  customerLogoUrl     String
  roadmapStages       RoadmapStage[]
  nextStepsTasks      NextStepsTask[]
  currentRoadmapStage Int
  documents           Document[]
  images              PortalImage[]
  productInfoSections ProductInfoSection[]
  proposalHeading     String
  proposalSubheading  String
  proposalQuoteLink   String
  userPortals         UserPortal[]
  internalNotes       InternalNotes[]
  events              Event[]
  vendor              Vendor               @relation(fields: [vendorId], references: [id])
  vendorId            Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ProductInfoSectionLink {
  id                   Int                @id @default(autoincrement())
  linkText             String
  link                 String
  productInfoSectionId Int
  productInfoSection   ProductInfoSection @relation(fields: [productInfoSectionId], references: [id])
}

model ProductInfoSection {
  id       Int                      @id @default(autoincrement())
  portalId Int
  portal   Portal                   @relation(fields: [portalId], references: [id])
  heading  String
  links    ProductInfoSectionLink[]
}

model PortalImage {
  id        Int      @id @default(autoincrement())
  portalId  Int
  portal    Portal   @relation(fields: [portalId], references: [id])
  href      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoadmapStage {
  id          Int                @id @default(autoincrement())
  portal      Portal             @relation(fields: [portalId], references: [id])
  portalId    Int
  heading     String
  date        DateTime?
  tasks       RoadmapStageTask[]
  ctaLinkText String?
  ctaLink     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model RoadmapStageTask {
  id             Int          @id @default(autoincrement())
  roadmapStage   RoadmapStage @relation(fields: [roadmapStageId], references: [id])
  roadmapStageId Int
  task           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum CustomerOrVendor {
  VENDOR
  CUSTOMER
}

//TODO: add creator
model NextStepsTask {
  id               Int              @id @default(autoincrement())
  portalId         Int
  portal           Portal           @relation(fields: [portalId], references: [id])
  description      String
  isCompleted      Boolean
  customerOrVendor CustomerOrVendor
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Document {
  id          Int      @id @default(autoincrement())
  portalId    Int
  portal      Portal   @relation(fields: [portalId], references: [id])
  title       String
  href        String
  isCompleted Boolean
  uploader    User     @relation(fields: [userId], references: [id])
  userId      Int
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InternalNotes {
  id        Int      @id @default(autoincrement())
  portalId  Int
  portal    Portal   @relation(fields: [portalId], references: [id])
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id         Int       @id @default(autoincrement())
  ip         String
  type       EventType
  document   Document? @relation(fields: [documentId], references: [id])
  documentId Int?
  portal     Portal    @relation(fields: [portalId], references: [id])
  portalId   Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime  @default(now())
}

model MagicLink {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventType {
  NextStepAdd
  NextStepUpdate
  DocumentUpload
  DocumentOpen
  DocumentApprove
  ProposalApprove
  ProposalOpen
  CreateInternalMessage
  ProductInfoLinkOpen
}
